<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2014, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<!--
   This is the OSGi Blueprint XML file defining the Camel context and routes.  Because the file is in the
   OSGI-INF/blueprint directory inside our JAR, it will be automatically activated as soon as the bundle is installed.

   The root element for any OSGi Blueprint file is 'blueprint' - you also see the namespace definitions for both the Blueprint
   and the Camel namespaces.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http:/camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd  http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd                            http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd">
    <bean class="cl.bicevida.processor.ExceptionProcessor" id="exPr"/>
    <camelContext id="_contextBotonDePago" xmlns="http://camel.apache.org/schema/blueprint">
        <propertyPlaceholder id="properties" location="classpath:/configurationbice.properties"/>
        <onException>
            <exception>java.lang.Exception</exception>
            <handled>
                <simple>true</simple>
            </handled>
            <process id="proEX" ref="exPr"/>
            <marshal id="_marshal_Ex">
                <json id="_json_Ex" library="Jackson"/>
            </marshal>
        </onException>
        <restConfiguration component="restlet" port="{{middleware.botonpago.puerto}}"/>
        <rest path="/bicevida/boton/pago/apt" produces="application/json">
            <get uri="/services/ping">
                <route>
                    <log id="_logOK" message="PING OK [bv-boton-pago-apt]"/>
                </route>
            </get>
            <get outType="java.lang.String" produces="application/json" uri="/consultaDeuda/{rut}">
                <to uri="direct:consultaDeuda"/>
            </get>
            <post outType="java.lang.String" produces="application/json"
                type="cl.bicevida.object.PagoPublicoVO" uri="/distribuirProducto">
                <to uri="direct:distribuirProducto"/>
            </post>
            <post outType="java.lang.String" produces="application/json"
                type="cl.bicevida.object.PagoPublicoVO" uri="/confirmarDistribucion">
                <to uri="direct:confirmarDistribucion"/>
            </post>
            <post outType="java.lang.String" produces="application/json"
                type="cl.bicevida.object.PagoPublicoVO" uri="/confirmaProducto">
                <to uri="direct:confirmaProducto"/>
            </post>
            <post outType="java.lang.String" produces="application/json"
                type="cl.bicevida.object.PagoPublicoVO" uri="/confirmaMedioPago">
                <to uri="direct:confirmaMedioPago"/>
            </post>
            <post outType="java.lang.String" produces="application/json"
                type="cl.bicevida.object.PagoPublicoVO" uri="/verificarComprobante">
                <to uri="direct:verificarComprobante"/>
            </post>
            <post outType="java.lang.String" produces="application/json"
                type="cl.bicevida.object.InCorreo" uri="/enviaEmail">
                <to uri="direct:enviaCorreo"/>
            </post>
            <post outType="java.lang.String" produces="application/json"
                type="cl.bicevida.object.PagoPublicoVO" uri="/cancelar">
                <to uri="direct:cancelar"/>
            </post>
        </rest>
        <!-- CONSULTA DEUDA -->
        <route id="__routeConsultaDeuda">
            <from id="_direct:consultaDeudaAPT" uri="direct:consultaDeuda"/>
            <log id="_log_consultaDeudaAPT" message="Rut de consulta: ${header.rut}"/>
            <setHeader headerName="Content-Type" id="_setHeaderContentTypeAPT">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathAPT">
                <simple>/WSBotonDePagoAPT/rest/apt/consultaDeuda</simple>
            </setHeader>
            <setHeader headerName="CamelHttpQuery" id="_httpQueryAPT">
                <simple>rut=${header.rut}</simple>
            </setHeader>
            <to id="callConsultaDeudaAPT" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_consultaDeudaAPT" type="java.lang.String"/>
            <log id="_log_salida_consultaDeudaAPT" message="Salida de la Consulta deuda: ${body}"/>
        </route>
        <!-- FIN CONSULTA DEUDA -->
        <!-- DISTRIBUCION PRODUCTO -->
        <route id="__routeDistribuirProducto">
            <from id="_direct:distribuirProducto" uri="direct:distribuirProducto"/>
            <log id="_log_distribucionProducto" message="Entro a la distribucion"/>
            <setHeader headerName="Content-Type" id="_ContentTypeConfirmacionDis">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathDistribucion">
                <simple>/WSBotonDePagoAPT/rest/apt/distribuirProducto</simple>
            </setHeader>
            <to id="callDistribucionProducto" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_distribucion" type="java.lang.String"/>
            <log id="_log_salida_distribucion" message="Salida de la distribucion: ${body}"/>
        </route>
        <!-- FIN DISTRIBUCION -->
        <!-- CONFIRMACION DISTRIBUCION PRODUCTO -->
        <route id="__routeConfirmaDistribucionProducto">
            <from id="_direct:confirmarDistribucion" uri="direct:confirmarDistribucion"/>
            <log id="_log_confirmaDistribucionDistribucionProducto" message="Entro a la confirmacion Distribucion"/>
            <setHeader headerName="Content-Type" id="_ContentTypeConfirmacionDistribucion">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathConfirmacionDistribucion">
                <simple>/WSBotonDePagoAPT/rest/apt/confirmarDistribucion</simple>
            </setHeader>
            <to id="callConfirmacionDistribucionProducto" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_confirmacionDistribucion" type="java.lang.String"/>
            <log id="_log_salida_confirmacionDistribucion" message="Salida de la Confirmacion Distribucion del producto: ${body}"/>
        </route>
        <!-- FIN CONFIRMACION DISTRIBUCION  PRODUCTO -->
        <!-- CONFIRMACION PRODUCTO -->
        <route id="__routeConfirmaProductoAPT">
            <from id="_direct:confirmaProductoAPT" uri="direct:confirmaProducto"/>
            <log id="_log_confirmaProductoAPT" message="Entro a la confirmacion"/>
            <setHeader headerName="Content-Type" id="_ContentTypeConfirmacion">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathConfirmacionAPT">
                <simple>/WSBotonDePagoAPT/rest/apt/confirmarProducto</simple>
            </setHeader>
            <to id="callConfirmacionProductoAPT" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_confirmacionAPT" type="java.lang.String"/>
            <log id="_log_salida_confirmacionAPT" message="Salida de la Confirmacion del producto: ${body}"/>
        </route>
        <!-- FIN CONFIRMACION PRODUCTO -->
        <!-- CONFIRMACION MEDIO DE PAGO -->
        <route id="__routeConfirmaMedioPagoAPT">
            <from id="_direct:confirmaMedioPagoAPT" uri="direct:confirmaMedioPago"/>
            <log id="_log_confirmaMedioPagoAPT" message="Entro a la confirmacion del medio de pago"/>
            <setHeader headerName="Content-Type" id="_ContentTypeMedioPagoAPT">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathMedioPagoAPT">
                <simple>/WSBotonDePagoAPT/rest/apt/confirmarMedioPago</simple>
            </setHeader>
            <to id="callConfirmacionMedioPagoAPT" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_medioPagoAPT" type="java.lang.String"/>
            <log id="_log_salida_medioPagoAPT" message="Salida de la Confirmacion del medio de pago: ${body}"/>
        </route>
        <!-- FIN CONFIRMACION MEDIO DE PAGO -->
        <!-- VERIFICA COMPROBANTE -->
        <route id="__routeVerificaComprobanteAPT">
            <from id="_direct:verificaComprobanteAPT" uri="direct:verificarComprobante"/>
            <log id="_log_verificaComprobanteAPT" message="Entro a la verificacion del pago"/>
            <setHeader headerName="Content-Type" id="_ContentTypeComprobanteAPT">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathComprobanteAPT">
                <simple>/WSBotonDePagoAPT/rest/apt/verificaComprobante</simple>
            </setHeader>
            <to id="callVerificacionComprobanteAPT" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_comprobanteAPT" type="java.lang.String"/>
            <log id="_log_salida_comprobanteAPT" message="Salida de la Verificacion del pago: ${body}"/>
        </route>
        <!-- FIN VERIFICACION COMPROBANTE -->
        <!-- ENVIA CORREO -->
        <route id="__routeEnviaCorreoAPT">
            <from id="_direct:enviaCorreoAPT" uri="direct:enviaCorreo"/>
            <log id="_log_enviaCorreoAPT" message="Entro al envio de correo"/>
            <setHeader headerName="Content-Type" id="_ContentTypeCorreoAPT">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathCorreoAPT">
                <simple>/WSBotonDePagoAPT/rest/apt/enviarEmail</simple>
            </setHeader>
            <to id="callEnvioCorreoAPT" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_correoAPT" type="java.lang.String"/>
            <log id="_log_salida_correoAPT" message="Salida del envio de correo: ${body}"/>
        </route>
        <!-- FIN ENVIA CORREO -->
        <!-- ENVIA CORREO -->
        <route id="__routecancelarAPT">
            <from id="_direct:cancelarAPT" uri="direct:cancelar"/>
            <log id="_log_cancelarAPT" message="Cancelar"/>
            <setHeader headerName="Content-Type" id="_ContentTypeCancelarAPT">
                <simple>application/json</simple>
            </setHeader>
            <setHeader headerName="CamelHttpPath" id="_httpPathCancelarAPT">
                <simple>/WSBotonDePagoAPT/rest/apt/cancelar</simple>
            </setHeader>
            <to id="callCancelarAPT" uri="{{ohs.url}}/{{cluster.bp}}?bridgeEndpoint=true"/>
            <convertBodyTo id="_convertBody_cancelarAPT" type="java.lang.String"/>
            <log id="_log_salida_cancelarAPT" message="Salida de la cancelacion: ${body}"/>
        </route>
        <!-- FIN ENVIA CORREO -->
    </camelContext>
</blueprint>
